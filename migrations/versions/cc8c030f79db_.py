"""empty message

Revision ID: cc8c030f79db
Revises:
Create Date: 2025-10-31 00:23:14.836442

"""

from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision = "cc8c030f79db"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "addon_items",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("price", sa.Numeric(precision=10, scale=2), nullable=False),
        sa.Column("currency", sa.String(length=3), nullable=False),
        sa.Column("for_attendees", sa.Boolean(), nullable=True),
        sa.Column("for_exhibitors", sa.Boolean(), nullable=True),
        sa.Column("max_quantity_per_registration", sa.Integer(), nullable=True),
        sa.Column("requires_approval", sa.Boolean(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("available_from", sa.DateTime(), nullable=True),
        sa.Column("available_until", sa.DateTime(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.CheckConstraint(
            "currency IN ('USD', 'KES', 'TZS', 'UGX', 'EUR', 'GBP')",
            name="check_addon_valid_currency",
        ),
        sa.CheckConstraint("price >= 0", name="check_addon_price_positive"),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("addon_items", schema=None) as batch_op:
        batch_op.create_index(
            "idx_addon_active_applicability",
            ["is_active", "for_attendees", "for_exhibitors"],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f("ix_addon_items_is_active"), ["is_active"], unique=False
        )

    op.create_table(
        "exchange_rates",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("from_currency", sa.String(length=3), nullable=False),
        sa.Column("to_currency", sa.String(length=3), nullable=False),
        sa.Column("rate", sa.Numeric(precision=10, scale=6), nullable=False),
        sa.Column("effective_date", sa.Date(), nullable=False),
        sa.Column("expiry_date", sa.Date(), nullable=True),
        sa.Column("source", sa.String(length=100), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("created_by", sa.String(length=255), nullable=True),
        sa.CheckConstraint(
            "from_currency IN ('USD', 'KES', 'TZS', 'UGX', 'EUR', 'GBP')",
            name="check_from_currency_valid",
        ),
        sa.CheckConstraint(
            "to_currency IN ('USD', 'KES', 'TZS', 'UGX', 'EUR', 'GBP')",
            name="check_to_currency_valid",
        ),
        sa.CheckConstraint("rate > 0", name="check_rate_positive"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "from_currency",
            "to_currency",
            "effective_date",
            name="uq_currency_pair_date",
        ),
    )
    with op.batch_alter_table("exchange_rates", schema=None) as batch_op:
        batch_op.create_index(
            "idx_currency_pair_date",
            ["from_currency", "to_currency", "effective_date"],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f("ix_exchange_rates_effective_date"),
            ["effective_date"],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f("ix_exchange_rates_from_currency"),
            ["from_currency"],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f("ix_exchange_rates_to_currency"), ["to_currency"], unique=False
        )

    op.create_table(
        "exhibitor_package_prices",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "package_type",
            sa.Enum(
                "BRONZE",
                "SILVER",
                "GOLD",
                "PLATINUM",
                "CUSTOM",
                name="exhibitorpackage",
            ),
            nullable=False,
        ),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("price", sa.Numeric(precision=10, scale=2), nullable=False),
        sa.Column("currency", sa.String(length=3), nullable=False),
        sa.Column("booth_size", sa.String(length=50), nullable=True),
        sa.Column("included_passes", sa.Integer(), nullable=True),
        sa.Column("includes_electricity", sa.Boolean(), nullable=True),
        sa.Column("includes_wifi", sa.Boolean(), nullable=True),
        sa.Column("includes_furniture", sa.Boolean(), nullable=True),
        sa.Column("includes_catalog_listing", sa.Boolean(), nullable=True),
        sa.Column("includes_social_media", sa.Boolean(), nullable=True),
        sa.Column("includes_speaking_slot", sa.Boolean(), nullable=True),
        sa.Column("includes_workshop", sa.Boolean(), nullable=True),
        sa.Column("features", sa.Text(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("max_quantity", sa.Integer(), nullable=True),
        sa.Column("current_quantity", sa.Integer(), nullable=False),
        sa.Column("version", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.CheckConstraint(
            "currency IN ('USD', 'KES', 'TZS', 'UGX', 'EUR', 'GBP')",
            name="check_package_valid_currency",
        ),
        sa.CheckConstraint(
            "current_quantity >= 0", name="check_package_quantity_positive"
        ),
        sa.CheckConstraint("price >= 0", name="check_package_price_positive"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("package_type"),
    )
    with op.batch_alter_table("exhibitor_package_prices", schema=None) as batch_op:
        batch_op.create_index(
            "idx_package_active_type", ["is_active", "package_type"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_exhibitor_package_prices_is_active"),
            ["is_active"],
            unique=False,
        )

    op.create_table(
        "promo_codes",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("code", sa.String(length=50), nullable=False),
        sa.Column("description", sa.String(length=255), nullable=True),
        sa.Column("discount_type", sa.String(length=20), nullable=False),
        sa.Column("discount_value", sa.Numeric(precision=10, scale=2), nullable=False),
        sa.Column(
            "max_discount_amount", sa.Numeric(precision=10, scale=2), nullable=True
        ),
        sa.Column(
            "min_purchase_amount", sa.Numeric(precision=10, scale=2), nullable=True
        ),
        sa.Column("applicable_to_attendees", sa.Boolean(), nullable=True),
        sa.Column("applicable_to_exhibitors", sa.Boolean(), nullable=True),
        sa.Column(
            "applicable_ticket_types",
            sa.Text(),
            nullable=True,
        ),
        sa.Column("applicable_packages", sa.Text(), nullable=True),
        sa.Column("max_uses", sa.Integer(), nullable=True),
        sa.Column("current_uses", sa.Integer(), nullable=False),
        sa.Column("max_uses_per_user", sa.Integer(), nullable=True),
        sa.Column("valid_from", sa.DateTime(), nullable=False),
        sa.Column("valid_until", sa.DateTime(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("campaign_name", sa.String(length=100), nullable=True),
        sa.Column("campaign_source", sa.String(length=100), nullable=True),
        sa.Column("created_by", sa.String(length=255), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.CheckConstraint(
            "(discount_type = 'percentage' AND discount_value <= 100) OR discount_type = 'fixed'",
            name="check_percentage_max_100",
        ),
        sa.CheckConstraint(
            "discount_type IN ('percentage', 'fixed')", name="check_valid_discount_type"
        ),
        sa.CheckConstraint("current_uses >= 0", name="check_current_uses_positive"),
        sa.CheckConstraint("discount_value >= 0", name="check_discount_value_positive"),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("promo_codes", schema=None) as batch_op:
        batch_op.create_index(
            "idx_promo_code_active", ["code", "is_active"], unique=False
        )
        batch_op.create_index(
            "idx_promo_validity",
            ["valid_from", "valid_until", "is_active"],
            unique=False,
        )
        batch_op.create_index(batch_op.f("ix_promo_codes_code"), ["code"], unique=True)
        batch_op.create_index(
            batch_op.f("ix_promo_codes_is_active"), ["is_active"], unique=False
        )

    op.create_table(
        "ticket_prices",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "ticket_type",
            sa.Enum(
                "FREE",
                "STANDARD",
                "VIP",
                "STUDENT",
                "GROUP",
                "EARLY_BIRD",
                "SPEAKER",
                "VOLUNTEER",
                name="attendeetickettype",
            ),
            nullable=False,
        ),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("price", sa.Numeric(precision=10, scale=2), nullable=False),
        sa.Column("currency", sa.String(length=3), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("max_quantity", sa.Integer(), nullable=True),
        sa.Column("current_quantity", sa.Integer(), nullable=False),
        sa.Column("early_bird_price", sa.Numeric(precision=10, scale=2), nullable=True),
        sa.Column("early_bird_deadline", sa.DateTime(), nullable=True),
        sa.Column("includes_lunch", sa.Boolean(), nullable=True),
        sa.Column("includes_materials", sa.Boolean(), nullable=True),
        sa.Column("includes_certificate", sa.Boolean(), nullable=True),
        sa.Column("includes_networking", sa.Boolean(), nullable=True),
        sa.Column("version", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.CheckConstraint(
            "currency IN ('USD', 'KES', 'TZS', 'UGX', 'EUR', 'GBP')",
            name="check_valid_currency",
        ),
        sa.CheckConstraint(
            "current_quantity >= 0", name="check_current_quantity_positive"
        ),
        sa.CheckConstraint("price >= 0", name="check_ticket_price_positive"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("ticket_type"),
    )
    with op.batch_alter_table("ticket_prices", schema=None) as batch_op:
        batch_op.create_index(
            "idx_ticket_active_type", ["is_active", "ticket_type"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_ticket_prices_is_active"), ["is_active"], unique=False
        )

    op.create_table(
        "users",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=120), nullable=False),
        sa.Column("email", sa.String(length=120), nullable=False),
        sa.Column("password_hash", sa.String(length=128), nullable=False),
        sa.Column(
            "role",
            sa.Enum("ADMIN", "STAFF", "ORGANIZER", name="userrole"),
            nullable=True,
        ),
        sa.Column("is_active", sa.Boolean(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("users", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_users_created_at"), ["created_at"], unique=False
        )
        batch_op.create_index(batch_op.f("ix_users_email"), ["email"], unique=True)
        batch_op.create_index(batch_op.f("ix_users_role"), ["role"], unique=False)

    op.create_table(
        "registrations",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("reference_number", sa.String(length=50), nullable=False),
        sa.Column("confirmation_code", sa.String(length=20), nullable=False),
        sa.Column("registration_type", sa.String(length=20), nullable=False),
        sa.Column(
            "status",
            sa.Enum(
                "DRAFT",
                "PENDING",
                "PAYMENT_PENDING",
                "CONFIRMED",
                "CANCELLED",
                "REFUNDED",
                "WAITLISTED",
                "EXPIRED",
                name="registrationstatus",
            ),
            nullable=False,
        ),
        sa.Column("first_name", sa.String(length=100), nullable=False),
        sa.Column("last_name", sa.String(length=100), nullable=False),
        sa.Column("email", sa.String(length=255), nullable=False),
        sa.Column("phone_country_code", sa.String(length=10), nullable=True),
        sa.Column("phone_number", sa.String(length=20), nullable=True),
        sa.Column("organization", sa.String(length=255), nullable=True),
        sa.Column("job_title", sa.String(length=150), nullable=True),
        sa.Column("country", sa.String(length=100), nullable=True),
        sa.Column("city", sa.String(length=100), nullable=True),
        sa.Column("qr_code_data", sa.String(length=500), nullable=True),
        sa.Column("qr_code_image_url", sa.String(length=500), nullable=True),
        sa.Column("consent_photography", sa.Boolean(), nullable=True),
        sa.Column("consent_networking", sa.Boolean(), nullable=True),
        sa.Column("consent_data_sharing", sa.Boolean(), nullable=True),
        sa.Column("newsletter_signup", sa.Boolean(), nullable=True),
        sa.Column("referral_source", sa.String(length=100), nullable=True),
        sa.Column("admin_notes", sa.Text(), nullable=True),
        sa.Column("internal_tags", sa.Text(), nullable=True),
        sa.Column("is_deleted", sa.Boolean(), nullable=False),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_by", sa.String(length=255), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("created_by_id", sa.Integer(), nullable=True),
        sa.Column("confirmed_at", sa.DateTime(), nullable=True),
        sa.Column("version", sa.Integer(), nullable=False),
        # Note: SQLite doesn't support regex operators, so email/phone validation is handled in application layer
        sa.ForeignKeyConstraint(
            ["created_by_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("confirmation_code"),
        sa.UniqueConstraint(
            "email", "registration_type", "is_deleted", name="uq_email_type_active"
        ),
    )
    with op.batch_alter_table("registrations", schema=None) as batch_op:
        batch_op.create_index("idx_deleted", ["is_deleted", "deleted_at"], unique=False)
        batch_op.create_index(
            "idx_reference_number", ["reference_number"], unique=False
        )
        batch_op.create_index(
            "idx_status_created", ["status", "created_at"], unique=False
        )
        batch_op.create_index(
            "idx_type_status", ["registration_type", "status"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_registrations_created_at"), ["created_at"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_registrations_created_by_id"),
            ["created_by_id"],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f("ix_registrations_email"), ["email"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_registrations_first_name"), ["first_name"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_registrations_is_deleted"), ["is_deleted"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_registrations_last_name"), ["last_name"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_registrations_reference_number"),
            ["reference_number"],
            unique=True,
        )
        batch_op.create_index(
            batch_op.f("ix_registrations_registration_type"),
            ["registration_type"],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f("ix_registrations_status"), ["status"], unique=False
        )

    op.create_table(
        "addon_purchases",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("registration_id", sa.Integer(), nullable=False),
        sa.Column("addon_id", sa.Integer(), nullable=False),
        sa.Column("quantity", sa.Integer(), nullable=False),
        sa.Column("unit_price", sa.Numeric(precision=10, scale=2), nullable=False),
        sa.Column("total_price", sa.Numeric(precision=10, scale=2), nullable=False),
        sa.Column("currency", sa.String(length=3), nullable=False),
        sa.Column("approved", sa.Boolean(), nullable=True),
        sa.Column("approved_by", sa.String(length=255), nullable=True),
        sa.Column("approved_at", sa.DateTime(), nullable=True),
        sa.Column("rejection_reason", sa.Text(), nullable=True),
        sa.Column("special_instructions", sa.Text(), nullable=True),
        sa.Column("fulfilled", sa.Boolean(), nullable=True),
        sa.Column("fulfilled_at", sa.DateTime(), nullable=True),
        sa.Column("fulfillment_notes", sa.Text(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.CheckConstraint("quantity > 0", name="check_addon_quantity_positive"),
        sa.CheckConstraint("total_price >= 0", name="check_addon_total_price_positive"),
        sa.CheckConstraint("unit_price >= 0", name="check_addon_unit_price_positive"),
        sa.ForeignKeyConstraint(
            ["addon_id"],
            ["addon_items.id"],
        ),
        sa.ForeignKeyConstraint(
            ["registration_id"],
            ["registrations.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("addon_purchases", schema=None) as batch_op:
        batch_op.create_index(
            "idx_addon_purchase_registration",
            ["registration_id", "addon_id"],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f("ix_addon_purchases_addon_id"), ["addon_id"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_addon_purchases_registration_id"),
            ["registration_id"],
            unique=False,
        )

    op.create_table(
        "attendee_registrations",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "ticket_type",
            sa.Enum(
                "FREE",
                "STANDARD",
                "VIP",
                "STUDENT",
                "GROUP",
                "EARLY_BIRD",
                "SPEAKER",
                "VOLUNTEER",
                name="attendeetickettype",
            ),
            nullable=False,
        ),
        sa.Column("ticket_price_id", sa.Integer(), nullable=True),
        sa.Column(
            "professional_category",
            sa.Enum(
                "BEEKEEPER_HOBBYIST",
                "BEEKEEPER_COMMERCIAL",
                "RESEARCHER",
                "GOVERNMENT",
                "EQUIPMENT_SUPPLIER",
                "HONEY_PROCESSOR",
                "NGO",
                "STUDENT",
                "CONSULTANT",
                "INVESTOR",
                "MEDIA",
                "OTHER",
                name="professionalcategory",
            ),
            nullable=True,
        ),
        sa.Column("event_preferences", sa.Text(), nullable=True),
        sa.Column("dietary_requirement", sa.String(length=50), nullable=True),
        sa.Column("dietary_notes", sa.Text(), nullable=True),
        sa.Column("accessibility_needs", sa.Text(), nullable=True),
        sa.Column("special_requirements", sa.Text(), nullable=True),
        sa.Column("needs_visa_letter", sa.Boolean(), nullable=True),
        sa.Column("visa_letter_sent", sa.Boolean(), nullable=True),
        sa.Column("visa_letter_sent_at", sa.DateTime(), nullable=True),
        sa.Column("checked_in", sa.Boolean(), nullable=True),
        sa.Column("checked_in_at", sa.DateTime(), nullable=True),
        sa.Column("checked_in_by", sa.String(length=255), nullable=True),
        sa.Column("badge_printed", sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(
            ["id"],
            ["registrations.id"],
        ),
        sa.ForeignKeyConstraint(
            ["ticket_price_id"],
            ["ticket_prices.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("attendee_registrations", schema=None) as batch_op:
        batch_op.create_index(
            "idx_attendee_checkin", ["checked_in", "checked_in_at"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_attendee_registrations_checked_in"),
            ["checked_in"],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f("ix_attendee_registrations_professional_category"),
            ["professional_category"],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f("ix_attendee_registrations_ticket_type"),
            ["ticket_type"],
            unique=False,
        )

    op.create_table(
        "email_logs",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("registration_id", sa.Integer(), nullable=True),
        sa.Column("recipient_email", sa.String(length=255), nullable=False),
        sa.Column("recipient_name", sa.String(length=255), nullable=True),
        sa.Column("email_type", sa.String(length=50), nullable=False),
        sa.Column("template_name", sa.String(length=100), nullable=True),
        sa.Column("subject", sa.String(length=255), nullable=True),
        sa.Column("status", sa.String(length=20), nullable=False),
        sa.Column("error_message", sa.Text(), nullable=True),
        sa.Column("message_id", sa.String(length=255), nullable=True),
        sa.Column("provider", sa.String(length=50), nullable=True),
        sa.Column("sent_at", sa.DateTime(), nullable=False),
        sa.Column("delivered_at", sa.DateTime(), nullable=True),
        sa.Column("opened_at", sa.DateTime(), nullable=True),
        sa.Column("first_opened_at", sa.DateTime(), nullable=True),
        sa.Column("open_count", sa.Integer(), nullable=True),
        sa.Column("clicked_at", sa.DateTime(), nullable=True),
        sa.Column("click_count", sa.Integer(), nullable=True),
        sa.Column("bounced_at", sa.DateTime(), nullable=True),
        sa.Column("bounce_type", sa.String(length=50), nullable=True),
        sa.Column("complained_at", sa.DateTime(), nullable=True),
        sa.Column("email_metadata", sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(
            ["registration_id"],
            ["registrations.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("message_id"),
    )
    with op.batch_alter_table("email_logs", schema=None) as batch_op:
        batch_op.create_index(
            "idx_email_recipient", ["recipient_email", "sent_at"], unique=False
        )
        batch_op.create_index("idx_email_sent_date", ["sent_at"], unique=False)
        batch_op.create_index(
            "idx_email_type_status", ["email_type", "status"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_email_logs_email_type"), ["email_type"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_email_logs_recipient_email"),
            ["recipient_email"],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f("ix_email_logs_registration_id"),
            ["registration_id"],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f("ix_email_logs_sent_at"), ["sent_at"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_email_logs_status"), ["status"], unique=False
        )

    op.create_table(
        "exhibitor_registrations",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("company_legal_name", sa.String(length=255), nullable=False),
        sa.Column("company_country", sa.String(length=100), nullable=False),
        sa.Column("company_address", sa.Text(), nullable=False),
        sa.Column("company_website", sa.String(length=255), nullable=True),
        sa.Column("alternate_contact_email", sa.String(length=255), nullable=True),
        sa.Column(
            "industry_category",
            sa.Enum(
                "BEEKEEPING_EQUIPMENT",
                "PROCESSING_EQUIPMENT",
                "BEE_PRODUCTS",
                "PACKAGING",
                "TECHNOLOGY",
                "TRAINING",
                "FINANCIAL_SERVICES",
                "RESEARCH",
                "GOVERNMENT",
                "MEDIA",
                "OTHER",
                name="industrycategory",
            ),
            nullable=False,
        ),
        sa.Column("company_description", sa.Text(), nullable=False),
        sa.Column(
            "package_type",
            sa.Enum(
                "BRONZE",
                "SILVER",
                "GOLD",
                "PLATINUM",
                "CUSTOM",
                name="exhibitorpackage",
            ),
            nullable=False,
        ),
        sa.Column("package_price_id", sa.Integer(), nullable=True),
        sa.Column("booth_number", sa.String(length=20), nullable=True),
        sa.Column("booth_assigned", sa.Boolean(), nullable=True),
        sa.Column("booth_assigned_at", sa.DateTime(), nullable=True),
        sa.Column("booth_assigned_by", sa.String(length=255), nullable=True),
        sa.Column("number_of_staff", sa.Integer(), nullable=True),
        sa.Column("exhibitor_badges_needed", sa.Integer(), nullable=True),
        sa.Column("badges_generated", sa.Boolean(), nullable=True),
        sa.Column("products_to_exhibit", sa.Text(), nullable=True),
        sa.Column("special_requirements", sa.Text(), nullable=True),
        sa.Column("exhibitor_manual_sent", sa.Boolean(), nullable=True),
        sa.Column("exhibitor_manual_sent_at", sa.DateTime(), nullable=True),
        sa.Column("contract_signed", sa.Boolean(), nullable=True),
        sa.Column("contract_signed_at", sa.DateTime(), nullable=True),
        sa.Column("contract_url", sa.String(length=500), nullable=True),
        sa.Column("lead_retrieval_access", sa.Boolean(), nullable=True),
        sa.Column("lead_retrieval_activated", sa.Boolean(), nullable=True),
        sa.Column("total_leads_captured", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["id"],
            ["registrations.id"],
        ),
        sa.ForeignKeyConstraint(
            ["package_price_id"],
            ["exhibitor_package_prices.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("exhibitor_registrations", schema=None) as batch_op:
        batch_op.create_index(
            "idx_exhibitor_booth", ["booth_number", "booth_assigned"], unique=False
        )
        batch_op.create_index(
            "idx_exhibitor_company", ["company_legal_name"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_exhibitor_registrations_booth_number"),
            ["booth_number"],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f("ix_exhibitor_registrations_company_legal_name"),
            ["company_legal_name"],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f("ix_exhibitor_registrations_industry_category"),
            ["industry_category"],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f("ix_exhibitor_registrations_package_type"),
            ["package_type"],
            unique=False,
        )

    op.create_table(
        "payments",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("registration_id", sa.Integer(), nullable=False),
        sa.Column("payment_reference", sa.String(length=100), nullable=False),
        sa.Column("invoice_number", sa.String(length=50), nullable=True),
        sa.Column("subtotal", sa.Numeric(precision=10, scale=2), nullable=False),
        sa.Column("tax_amount", sa.Numeric(precision=10, scale=2), nullable=False),
        sa.Column("tax_rate", sa.Numeric(precision=5, scale=4), nullable=True),
        sa.Column("discount_amount", sa.Numeric(precision=10, scale=2), nullable=False),
        sa.Column("total_amount", sa.Numeric(precision=10, scale=2), nullable=False),
        sa.Column("currency", sa.String(length=3), nullable=False),
        sa.Column("exchange_rate", sa.Numeric(precision=10, scale=6), nullable=True),
        sa.Column(
            "base_currency_amount", sa.Numeric(precision=10, scale=2), nullable=True
        ),
        sa.Column(
            "payment_method",
            sa.Enum(
                "CARD",
                "MOBILE_MONEY",
                "BANK_TRANSFER",
                "INVOICE",
                "FREE",
                "CASH",
                name="paymentmethod",
            ),
            nullable=False,
        ),
        sa.Column(
            "payment_status",
            sa.Enum(
                "PENDING",
                "PROCESSING",
                "COMPLETED",
                "FAILED",
                "REFUNDED",
                "PARTIALLY_REFUNDED",
                "PARTIALLY_PAID",
                name="paymentstatus",
            ),
            nullable=False,
        ),
        sa.Column("stripe_payment_intent_id", sa.String(length=255), nullable=True),
        sa.Column("stripe_checkout_session_id", sa.String(length=255), nullable=True),
        sa.Column("stripe_customer_id", sa.String(length=255), nullable=True),
        sa.Column("stripe_charge_id", sa.String(length=255), nullable=True),
        sa.Column("stripe_refund_id", sa.String(length=255), nullable=True),
        sa.Column("transaction_id", sa.String(length=255), nullable=True),
        sa.Column("bank_reference", sa.String(length=100), nullable=True),
        sa.Column("mpesa_receipt", sa.String(length=100), nullable=True),
        sa.Column("invoice_url", sa.String(length=500), nullable=True),
        sa.Column("invoice_generated", sa.Boolean(), nullable=True),
        sa.Column("invoice_sent", sa.Boolean(), nullable=True),
        sa.Column("invoice_sent_at", sa.DateTime(), nullable=True),
        sa.Column("receipt_number", sa.String(length=50), nullable=True),
        sa.Column("receipt_url", sa.String(length=500), nullable=True),
        sa.Column("receipt_generated", sa.Boolean(), nullable=True),
        sa.Column("receipt_sent", sa.Boolean(), nullable=True),
        sa.Column("receipt_sent_at", sa.DateTime(), nullable=True),
        sa.Column("payment_initiated_at", sa.DateTime(), nullable=True),
        sa.Column("payment_completed_at", sa.DateTime(), nullable=True),
        sa.Column("payment_failed_at", sa.DateTime(), nullable=True),
        sa.Column("payment_due_date", sa.DateTime(), nullable=True),
        sa.Column("payment_reminder_sent", sa.Boolean(), nullable=True),
        sa.Column("refund_amount", sa.Numeric(precision=10, scale=2), nullable=False),
        sa.Column("refund_reason", sa.Text(), nullable=True),
        sa.Column("refunded_at", sa.DateTime(), nullable=True),
        sa.Column("refund_reference", sa.String(length=100), nullable=True),
        sa.Column("refund_requested_by", sa.String(length=255), nullable=True),
        sa.Column("refund_approved_by", sa.String(length=255), nullable=True),
        sa.Column("failure_reason", sa.Text(), nullable=True),
        sa.Column("failure_code", sa.String(length=50), nullable=True),
        sa.Column("retry_count", sa.Integer(), nullable=True),
        sa.Column("payment_notes", sa.Text(), nullable=True),
        sa.Column("verified_by", sa.String(length=255), nullable=True),
        sa.Column("verified_at", sa.DateTime(), nullable=True),
        sa.Column("reconciled", sa.Boolean(), nullable=True),
        sa.Column("reconciled_at", sa.DateTime(), nullable=True),
        sa.Column("reconciled_by", sa.String(length=255), nullable=True),
        sa.Column("payment_metadata", sa.Text(), nullable=True),
        sa.Column("gateway_response", sa.Text(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("version", sa.Integer(), nullable=False),
        sa.CheckConstraint(
            "currency IN ('USD', 'KES', 'TZS', 'UGX', 'EUR', 'GBP')",
            name="check_payment_valid_currency",
        ),
        sa.CheckConstraint("discount_amount >= 0", name="check_discount_positive"),
        sa.CheckConstraint("refund_amount >= 0", name="check_refund_positive"),
        sa.CheckConstraint("subtotal >= 0", name="check_subtotal_positive"),
        sa.CheckConstraint("tax_amount >= 0", name="check_tax_positive"),
        sa.CheckConstraint("total_amount >= 0", name="check_total_positive"),
        sa.ForeignKeyConstraint(
            ["registration_id"],
            ["registrations.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("stripe_checkout_session_id"),
    )
    with op.batch_alter_table("payments", schema=None) as batch_op:
        batch_op.create_index(
            "idx_payment_method_status",
            ["payment_method", "payment_status"],
            unique=False,
        )
        batch_op.create_index(
            "idx_payment_reconciled", ["reconciled", "reconciled_at"], unique=False
        )
        batch_op.create_index(
            "idx_payment_registration_status",
            ["registration_id", "payment_status"],
            unique=False,
        )
        batch_op.create_index(
            "idx_payment_status_date",
            ["payment_status", "payment_completed_at"],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f("ix_payments_created_at"), ["created_at"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_payments_invoice_number"), ["invoice_number"], unique=True
        )
        batch_op.create_index(
            batch_op.f("ix_payments_payment_completed_at"),
            ["payment_completed_at"],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f("ix_payments_payment_due_date"),
            ["payment_due_date"],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f("ix_payments_payment_initiated_at"),
            ["payment_initiated_at"],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f("ix_payments_payment_reference"),
            ["payment_reference"],
            unique=True,
        )
        batch_op.create_index(
            batch_op.f("ix_payments_payment_status"), ["payment_status"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_payments_reconciled"), ["reconciled"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_payments_registration_id"), ["registration_id"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_payments_stripe_customer_id"),
            ["stripe_customer_id"],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f("ix_payments_stripe_payment_intent_id"),
            ["stripe_payment_intent_id"],
            unique=True,
        )
        batch_op.create_index(
            batch_op.f("ix_payments_transaction_id"), ["transaction_id"], unique=False
        )

    op.create_table(
        "promo_code_usage",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("promo_code_id", sa.Integer(), nullable=False),
        sa.Column("registration_id", sa.Integer(), nullable=False),
        sa.Column("payment_id", sa.Integer(), nullable=True),
        sa.Column("discount_amount", sa.Numeric(precision=10, scale=2), nullable=False),
        sa.Column("original_amount", sa.Numeric(precision=10, scale=2), nullable=False),
        sa.Column("final_amount", sa.Numeric(precision=10, scale=2), nullable=False),
        sa.Column("used_at", sa.DateTime(), nullable=False),
        sa.CheckConstraint(
            "discount_amount >= 0", name="check_usage_discount_positive"
        ),
        sa.ForeignKeyConstraint(
            ["payment_id"],
            ["payments.id"],
        ),
        sa.ForeignKeyConstraint(
            ["promo_code_id"],
            ["promo_codes.id"],
        ),
        sa.ForeignKeyConstraint(
            ["registration_id"],
            ["registrations.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "promo_code_id", "registration_id", name="uq_promo_registration"
        ),
    )
    with op.batch_alter_table("promo_code_usage", schema=None) as batch_op:
        batch_op.create_index(
            "idx_promo_usage_date", ["promo_code_id", "used_at"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_promo_code_usage_promo_code_id"),
            ["promo_code_id"],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f("ix_promo_code_usage_registration_id"),
            ["registration_id"],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f("ix_promo_code_usage_used_at"), ["used_at"], unique=False
        )

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("promo_code_usage", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_promo_code_usage_used_at"))
        batch_op.drop_index(batch_op.f("ix_promo_code_usage_registration_id"))
        batch_op.drop_index(batch_op.f("ix_promo_code_usage_promo_code_id"))
        batch_op.drop_index("idx_promo_usage_date")

    op.drop_table("promo_code_usage")
    with op.batch_alter_table("payments", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_payments_transaction_id"))
        batch_op.drop_index(batch_op.f("ix_payments_stripe_payment_intent_id"))
        batch_op.drop_index(batch_op.f("ix_payments_stripe_customer_id"))
        batch_op.drop_index(batch_op.f("ix_payments_registration_id"))
        batch_op.drop_index(batch_op.f("ix_payments_reconciled"))
        batch_op.drop_index(batch_op.f("ix_payments_payment_status"))
        batch_op.drop_index(batch_op.f("ix_payments_payment_reference"))
        batch_op.drop_index(batch_op.f("ix_payments_payment_initiated_at"))
        batch_op.drop_index(batch_op.f("ix_payments_payment_due_date"))
        batch_op.drop_index(batch_op.f("ix_payments_payment_completed_at"))
        batch_op.drop_index(batch_op.f("ix_payments_invoice_number"))
        batch_op.drop_index(batch_op.f("ix_payments_created_at"))
        batch_op.drop_index("idx_payment_status_date")
        batch_op.drop_index("idx_payment_registration_status")
        batch_op.drop_index("idx_payment_reconciled")
        batch_op.drop_index("idx_payment_method_status")

    op.drop_table("payments")
    with op.batch_alter_table("exhibitor_registrations", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_exhibitor_registrations_package_type"))
        batch_op.drop_index(batch_op.f("ix_exhibitor_registrations_industry_category"))
        batch_op.drop_index(batch_op.f("ix_exhibitor_registrations_company_legal_name"))
        batch_op.drop_index(batch_op.f("ix_exhibitor_registrations_booth_number"))
        batch_op.drop_index("idx_exhibitor_company")
        batch_op.drop_index("idx_exhibitor_booth")

    op.drop_table("exhibitor_registrations")
    with op.batch_alter_table("email_logs", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_email_logs_status"))
        batch_op.drop_index(batch_op.f("ix_email_logs_sent_at"))
        batch_op.drop_index(batch_op.f("ix_email_logs_registration_id"))
        batch_op.drop_index(batch_op.f("ix_email_logs_recipient_email"))
        batch_op.drop_index(batch_op.f("ix_email_logs_email_type"))
        batch_op.drop_index("idx_email_type_status")
        batch_op.drop_index("idx_email_sent_date")
        batch_op.drop_index("idx_email_recipient")

    op.drop_table("email_logs")
    with op.batch_alter_table("attendee_registrations", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_attendee_registrations_ticket_type"))
        batch_op.drop_index(
            batch_op.f("ix_attendee_registrations_professional_category")
        )
        batch_op.drop_index(batch_op.f("ix_attendee_registrations_checked_in"))
        batch_op.drop_index("idx_attendee_checkin")

    op.drop_table("attendee_registrations")
    with op.batch_alter_table("addon_purchases", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_addon_purchases_registration_id"))
        batch_op.drop_index(batch_op.f("ix_addon_purchases_addon_id"))
        batch_op.drop_index("idx_addon_purchase_registration")

    op.drop_table("addon_purchases")
    with op.batch_alter_table("registrations", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_registrations_status"))
        batch_op.drop_index(batch_op.f("ix_registrations_registration_type"))
        batch_op.drop_index(batch_op.f("ix_registrations_reference_number"))
        batch_op.drop_index(batch_op.f("ix_registrations_last_name"))
        batch_op.drop_index(batch_op.f("ix_registrations_is_deleted"))
        batch_op.drop_index(batch_op.f("ix_registrations_first_name"))
        batch_op.drop_index(batch_op.f("ix_registrations_email"))
        batch_op.drop_index(batch_op.f("ix_registrations_created_by_id"))
        batch_op.drop_index(batch_op.f("ix_registrations_created_at"))
        batch_op.drop_index("idx_type_status")
        batch_op.drop_index("idx_status_created")
        batch_op.drop_index("idx_reference_number")
        batch_op.drop_index("idx_deleted")

    op.drop_table("registrations")
    with op.batch_alter_table("users", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_users_role"))
        batch_op.drop_index(batch_op.f("ix_users_email"))
        batch_op.drop_index(batch_op.f("ix_users_created_at"))

    op.drop_table("users")
    with op.batch_alter_table("ticket_prices", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_ticket_prices_is_active"))
        batch_op.drop_index("idx_ticket_active_type")

    op.drop_table("ticket_prices")
    with op.batch_alter_table("promo_codes", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_promo_codes_is_active"))
        batch_op.drop_index(batch_op.f("ix_promo_codes_code"))
        batch_op.drop_index("idx_promo_validity")
        batch_op.drop_index("idx_promo_code_active")

    op.drop_table("promo_codes")
    with op.batch_alter_table("exhibitor_package_prices", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_exhibitor_package_prices_is_active"))
        batch_op.drop_index("idx_package_active_type")

    op.drop_table("exhibitor_package_prices")
    with op.batch_alter_table("exchange_rates", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_exchange_rates_to_currency"))
        batch_op.drop_index(batch_op.f("ix_exchange_rates_from_currency"))
        batch_op.drop_index(batch_op.f("ix_exchange_rates_effective_date"))
        batch_op.drop_index("idx_currency_pair_date")

    op.drop_table("exchange_rates")
    with op.batch_alter_table("addon_items", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_addon_items_is_active"))
        batch_op.drop_index("idx_addon_active_applicability")

    op.drop_table("addon_items")
    # ### end Alembic commands ###
